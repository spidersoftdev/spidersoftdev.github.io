<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>json on SpiderSoft</title><link>http://www.spidersoft.com.au/tags/json/</link><description>Recent content in json on SpiderSoft</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 25 Jul 2016 15:05:22 +0000</lastBuildDate><atom:link href="http://www.spidersoft.com.au/tags/json/index.xml" rel="self" type="application/rss+xml"/><item><title>JSON objects in PHP</title><link>http://www.spidersoft.com.au/2016/json-objects-in-php/</link><pubDate>Mon, 25 Jul 2016 15:05:22 +0000</pubDate><guid>http://www.spidersoft.com.au/2016/json-objects-in-php/</guid><description>&lt;p>PHP is easy. You don’t have to know type of variable, before you use it. But sometimes it’s very problematic especially when we are dealing with JSON.&lt;/p></description></item><item><title>Reading unknown JSON object in go language</title><link>http://www.spidersoft.com.au/2014/reading-unknown-json-object-in-go-language/</link><pubDate>Mon, 18 Aug 2014 07:19:08 +0000</pubDate><guid>http://www.spidersoft.com.au/2014/reading-unknown-json-object-in-go-language/</guid><description>&lt;p>Exploring
&lt;a href="http://golang.org/">The Go Language&lt;/a>
is so much fun. Everything is brand new, and different then any other language. This time I’m going to show quick snippet which shows how to read JSON object with unknown structure, and map elements to something like hash table.&lt;/p></description></item></channel></rss>