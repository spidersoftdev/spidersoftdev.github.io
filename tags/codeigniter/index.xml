<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Codeigniter on SpiderSoft</title><link>https://www.spidersoft.com.au/tags/codeigniter/</link><description>Recent content in Codeigniter on SpiderSoft</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 25 Jul 2016 15:19:54 +0000</lastBuildDate><atom:link href="https://www.spidersoft.com.au/tags/codeigniter/index.xml" rel="self" type="application/rss+xml"/><item><title>Caddy rewrite and CodeIgniter</title><link>https://www.spidersoft.com.au/2016/caddy-rewrite-and-codeigniter/</link><pubDate>Mon, 25 Jul 2016 15:19:54 +0000</pubDate><guid>https://www.spidersoft.com.au/2016/caddy-rewrite-and-codeigniter/</guid><description>&lt;p> 
 
 
 
 
 &lt;a href="https://caddyserver.com/">Caddy&lt;/a>
 it’s a new kid in the block in category super light web servers. Personally – I love it. Same love I feel to 
 
 
 
 
 &lt;a href="https://codeigniter.com/">CodeIgniter&lt;/a>
 . To marge both of them, we need only basic rewrite rule to drop into caddyfile.&lt;/p>
&lt;pre tabindex="0">&lt;code>api.spidersoft.com.au {
 root /var/www/html/spidersoft.com.au
 gzip
 rewrite {
 to {path} {path}/ /index.php?/{uri}
 }
 fastcgi / /var/run/php-sock php
}
&lt;/code>&lt;/pre></description></item><item><title>PhpStorm PHPCodeSniffer and… CodeIgniter style guide</title><link>https://www.spidersoft.com.au/2015/phpstorm-phpcodesniffer-and-codeigniter-style-guide/</link><pubDate>Fri, 10 Jul 2015 01:26:14 +0000</pubDate><guid>https://www.spidersoft.com.au/2015/phpstorm-phpcodesniffer-and-codeigniter-style-guide/</guid><description>&lt;p>This article is related to my previous one about setting up 
 
 
 &lt;a href="https://www.spidersoft.com.au/2012/codeigniter-and-php_codesniffer/" title="CodeIgniter and PHP_CodeSniffer" target="_blank" rel="noopener">PHPCodeSniffer with CodeIgniter&lt;/a>
 coding standards.&lt;/p>
&lt;p>Installation on Linux boxes is pretty yeasy:&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo pear channel-update pear.php.net
yum install php-pear-PHP-CodeSniffer php-phpunit-phpcpd
&lt;/code>&lt;/pre>&lt;p>On Mac OS X you have couple options. Pear or Homebrew:&lt;/p>
&lt;p>&lt;code>brew install php-code-sniffer&lt;/code>&lt;/p>
&lt;p>And following that, on regular boxes CodeSniffer will be here:&lt;/p>
&lt;p>&lt;code>/usr/share/pear/PHP/CodeSniffer/Standards&lt;/code>&lt;/p>
&lt;p>on Mac OS CodeSniffer will be located here:&lt;/p>
&lt;p>&lt;code>/usr/lib/php/pear/PHP/CodeSniffer/Standards&lt;/code> or… &lt;code>/usr/local/Cellar/php-code-sniffer/1.5.6/CodeSniffer/Standards&lt;/code>&lt;/p>
&lt;p>CodeIgniter standard can be downloaded from this location  
 
 
 
 
 &lt;a href="https://github.com/thomas-ernest/CodeIgniter-for-PHP_CodeSniffer" title="https://github.com/thomas-ernest/CodeIgniter-for-PHP_CodeSniffer">https://github.com/thomas-ernest/CodeIgniter-for-PHP_CodeSniffer&lt;/a>
 &lt;/p></description></item><item><title>PHPUnit and CodeIgniter 3.0</title><link>https://www.spidersoft.com.au/2015/phpunit-and-codeigniter-3-0/</link><pubDate>Thu, 02 Apr 2015 22:00:22 +0000</pubDate><guid>https://www.spidersoft.com.au/2015/phpunit-and-codeigniter-3-0/</guid><description>&lt;p>Quick tutorial how to setup proper unit testing with PHPUnit and CodeIgniter 3.0.&lt;br>
We need couple elements&lt;/p>
&lt;ol>
&lt;li> 
 
 
 
 
 &lt;a href="http://www.codeigniter.com">CodeIgniter&lt;/a>
 – we are working with version 3.0rc3&lt;/li>
&lt;li> 
 
 
 
 
 &lt;a href="https://phpunit.de">PHPUnit&lt;/a>
  – latest one&lt;/li>
&lt;/ol>
&lt;p>If you don’t have phpunit installed globally, you can go with composer, just add section to your &lt;code>composer.json&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>{
 &amp;#34;require-dev&amp;#34;: {
 &amp;#34;phpunit/phpunit&amp;#34;: &amp;#34;4.1.*&amp;#34;
 }
}
&lt;/code>&lt;/pre>&lt;p>and then&lt;br>
&lt;code>composer.phar install&lt;/code>&lt;br>
and after while we have&lt;br>
&lt;code>./vendor/bin/phpunit&lt;/code>&lt;br>
working phpunit.&lt;/p>
&lt;p>let’s create &lt;code>phpunit.xml.dist&lt;/code>&lt;/p>
&lt;script src="https://gist.github.com/slav123/554d0a4ce91c8a0a68fe.js">&lt;/script>

&lt;p>next step will require create separate bootstrap file for PHPUnit. Just copy &lt;code>cp index.php tests/Bootstrap.php&lt;/code>&lt;br>
We have to make 2 small amends.&lt;/p></description></item><item><title>CodeIgniter-minify update</title><link>https://www.spidersoft.com.au/2014/codeigniter-minify-update/</link><pubDate>Fri, 23 May 2014 00:05:52 +0000</pubDate><guid>https://www.spidersoft.com.au/2014/codeigniter-minify-update/</guid><description>&lt;p>Just introduce some new options to my quite popular library CodeIgniter-minify. From now one you can choose CSS compression engine (cssmin || minify), also FORCE rewrite CSS files. Some speed improvements were also made.&lt;/p>
&lt;p>Please feel to check out library on GitGub – 
 
 
 
 
 &lt;a href="https://github.com/slav123/CodeIgniter-minify">CodeIgniter-minify&lt;/a>
 &lt;/p></description></item><item><title>CodeIgniter img update</title><link>https://www.spidersoft.com.au/2014/codeigniter-img-update/</link><pubDate>Tue, 15 Apr 2014 03:49:25 +0000</pubDate><guid>https://www.spidersoft.com.au/2014/codeigniter-img-update/</guid><description>&lt;p>It’s been a while since my library 
 
 
 
 
 &lt;a href="https://github.com/slav123/CodeIgniter-Img">CodeIgniter img&lt;/a>
 was updated. Purpose of this library is pretty clear – to scale images on the fly using CodeIgniter. It’s very useful in all kinds of website and CMS-like projects. All you need to do, is just load library and inside view use it like that&lt;/p>
&lt;pre tabindex="0">&lt;code>$this-&amp;gt;img-&amp;gt;rimg(&amp;#39;path/to/image.jpg&amp;#39;, array(&amp;#39;width&amp;#39; =&amp;gt; 100, &amp;#39;height&amp;#39; =&amp;gt; 200, &amp;#39;alt&amp;#39;=&amp;#39;my awesome image&amp;#39;));
&lt;/code>&lt;/pre>&lt;p>First time when script hits image, will create thumbnail. Next time, website will get already scaled image. If you need change dimensions, just change it within view – don’t worry about recreating images.&lt;/p></description></item><item><title>CodeIgniter and PHP_CodeSniffer</title><link>https://www.spidersoft.com.au/2012/codeigniter-and-php_codesniffer/</link><pubDate>Wed, 07 Mar 2012 08:28:40 +0000</pubDate><guid>https://www.spidersoft.com.au/2012/codeigniter-and-php_codesniffer/</guid><description>&lt;p> 
 
 
 
 
 &lt;a href="http://codeigniter.com/">CodeIgniter&lt;/a>
 is the king 😉 But if we want to create good quality code, we should be aware about 
 
 
 
 
 &lt;a href="http://codeigniter.com/user_guide/general/styleguide.html">CodeIgniter style guide&lt;/a>
 standards. What can be better than 
 
 
 
 
 &lt;a href="http://pear.php.net/package/PHP_CodeSniffer/">PHP_CodeSniffer&lt;/a>
 for keeping our code consistent and clean as much as it possible.&lt;/p>
&lt;p>Unfortunately standard rules from PHP_CodeSniffer doesn’t apply for CodeIgniter. You have to install additional set of rules – you can download them from here: 
 
 
 
 
 &lt;a href="https://github.com/thomas-ernest/CodeIgniter-for-PHP_CodeSniffer">PHP_CodeSniffer rules for CI&lt;/a>
 .&lt;/p></description></item><item><title>XCache driver CodeIgniter update</title><link>https://www.spidersoft.com.au/2011/xcache-driver-codeigniter-update/</link><pubDate>Sat, 17 Sep 2011 05:47:37 +0000</pubDate><guid>https://www.spidersoft.com.au/2011/xcache-driver-codeigniter-update/</guid><description>&lt;p>Today I released small update for 
 
 
 
 
 &lt;a href="http://www.spidersoft.com.au/projects/xcache-driver-codeigniter/">XCache diver for CodeIgniter&lt;/a>
 . It’s related with new version of CodeIgniter framework.&lt;/p></description></item><item><title>CodeIgniter IMG – thumbnails on the fly</title><link>https://www.spidersoft.com.au/2011/codeigniter-img-thumbnails-on-the-fly/</link><pubDate>Sun, 03 Jul 2011 20:19:57 +0000</pubDate><guid>https://www.spidersoft.com.au/2011/codeigniter-img-thumbnails-on-the-fly/</guid><description>&lt;p>CodeIgniter library to generate high quality thumbnails&lt;/p>
&lt;p>Library is based on excellent * Smarty plugin “Thumb” * created in 2005 by Christoph Erdmann. This version is a little different, we are using core from Thumb, and some modification which gives more flexibility to work with it.&lt;/p>
&lt;h2 id="features">Features&lt;/h2>
&lt;ul>
&lt;li>thumbnails are generated “on the fly” no additional actions required,&lt;/li>
&lt;li>cache for generated thumbnails,&lt;/li>
&lt;li>clear structure for generated thumbnails,&lt;/li>
&lt;li>thumbnails sharpening function,&lt;/li>
&lt;li>cropping function,&lt;/li>
&lt;li>fill space function&lt;/li>
&lt;/ul>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>You need to upload file &lt;code>img.php&lt;/code> into directory &lt;code>application/libraries&lt;/code>. In controller, you need to load library:&lt;/p></description></item></channel></rss>