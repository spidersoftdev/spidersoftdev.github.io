<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>email on SpiderSoft</title><link>http://www.spidersoft.com.au/tags/email/</link><description>Recent content in email on SpiderSoft</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 27 Mar 2019 08:43:27 +0000</lastBuildDate><atom:link href="http://www.spidersoft.com.au/tags/email/index.xml" rel="self" type="application/rss+xml"/><item><title>Automated email parser</title><link>http://www.spidersoft.com.au/2019/automated-email-parser/</link><pubDate>Wed, 27 Mar 2019 08:43:27 +0000</pubDate><guid>http://www.spidersoft.com.au/2019/automated-email-parser/</guid><description>It’s a simple mechanic to decompose emails into useful parts, like some markup (to squiz emails directly into internal systems) and create file attachments – and extract inline images.
Flow is pretty simple, but we have couple components.
We need something to “receive” emails. Easiest way is to use Amazon SES or mailgun or… something else. There is a couple SASS solutions for that Next step is to be notified when email arrive, so we don’t have overhead with checking email every couple of minutes We have to “decompose” – decode email from it’s raw format to text, and attachments.</description></item><item><title>How to make email work better email2issue</title><link>http://www.spidersoft.com.au/2018/how-to-make-email-work-better-email2issue/</link><pubDate>Fri, 16 Mar 2018 09:02:56 +0000</pubDate><guid>http://www.spidersoft.com.au/2018/how-to-make-email-work-better-email2issue/</guid><description>&lt;p>The problem:&lt;/p>
&lt;p>We are using bug tracking system, as most of the software development companies. Creating an issue is quite simple. Open bug tracking system, fill some inputs, upload attachments – done. Issue is created. Sometimes issue is described with multiple attachments (screenshots). Bug tracking system allows us to embed images into description.  All issues come from users in a form of email.&lt;/p></description></item><item><title>Sending emails from commandline</title><link>http://www.spidersoft.com.au/2014/sending-emails-from-commandline/</link><pubDate>Tue, 26 Aug 2014 04:41:08 +0000</pubDate><guid>http://www.spidersoft.com.au/2014/sending-emails-from-commandline/</guid><description>&lt;p>Pretty easy but annoying task. Especially when you want to send email using specific SMTP server, or from GMAIL using SSL or add some attachment, or send RAW emails. Solution is there –
&lt;a href="https://github.com/muquit/mailsend/">mailsend&lt;/a>
. Extremely simple command line tool for Linux, Mac OS X and even Windows ;). Compile / download binary and you can enjoy freedom of sending emails from command line.&lt;/p></description></item><item><title>Send and receive emails via API</title><link>http://www.spidersoft.com.au/2013/send-and-receive-emails-via-api/</link><pubDate>Mon, 25 Mar 2013 03:39:56 +0000</pubDate><guid>http://www.spidersoft.com.au/2013/send-and-receive-emails-via-api/</guid><description>&lt;p>It’s coming with experience. On the beginning you always trying to do everything by your self. No frameworks, no libraries – bare bone solutions written from the scratch. Later – you realising than your time is to expensive, and start using some libraries. After another period of time you are getting to the point, that you are willing to use as many existing solutions as it’s possible.&lt;/p>
&lt;p>Really typical problem – sending and receiving emails from the apps. Of course – you can send emails using simple
&lt;a href="http://www.php.net/manual/en/function.mail.php" title="PHP mail">mail&lt;/a>
() command or using more sophisticated libraries like
&lt;a href="http://swiftmailer.org/">Swiftmailer&lt;/a>
but… if there is an option to use API, you can chose from couples:&lt;/p></description></item></channel></rss>