<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go Lang on SpiderSoft</title><link>https://www.spidersoft.com.au/categories/go-lang/</link><description>Recent content in Go Lang on SpiderSoft</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 23 Jul 2021 06:16:24 +0000</lastBuildDate><atom:link href="https://www.spidersoft.com.au/categories/go-lang/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker, GO and CGO application build</title><link>https://www.spidersoft.com.au/2021/docker-go-cgo/</link><pubDate>Fri, 23 Jul 2021 06:16:24 +0000</pubDate><guid>https://www.spidersoft.com.au/2021/docker-go-cgo/</guid><description>&lt;p>I‚Äôve been avoiding Docker for a very long time. I started as a sysadmin setting up servers running FreeBSD and early versions of Debian on bare-bone servers. As soon as ‚Äúcloud‚Äù came into the market, I switched to AWS and GCE and have used them since then. EC2 was my always goto choice to deploy something on the internet quickly. But Docker ‚Äî for some reason, I was avoiding it until this two years ago, when I started using it. Without too much trust.&lt;/p>
&lt;p>But today, history is not about my love &amp;amp; hate relationship with Docker, but about deploying the GO application and VIPS library. A couple of problems appeared during the process, and it‚Äôs worth mentioning them for future generations because I could find much help around my issues.&lt;/p></description></item><item><title>Why VIPS and Go it‚Äôs not a good match for production environment</title><link>https://www.spidersoft.com.au/posts/2020-07-14-vips-and-go-does-not-play-together/</link><pubDate>Wed, 14 Jul 2021 07:19:08 +0000</pubDate><guid>https://www.spidersoft.com.au/posts/2020-07-14-vips-and-go-does-not-play-together/</guid><description>I built a simple worker to do some magic with images by using Go &amp;amp; VIPS . I chose VIPS because it is blazing fast compared to other Go image processing libraries. So this is the story about what went wrong.
Because my DEV setup is Apple MacBook Pro with M1 Apple Silicon, it‚Äôs always tricky to compile something to the proper architecture. Installing VIPS on my machine, it‚Äôs pretty straightforward:</description></item><item><title>Quickest in-house HTML to PDF solution</title><link>https://www.spidersoft.com.au/2021/quickest-in-house-html-to-pdf-solution/</link><pubDate>Fri, 22 Jan 2021 12:44:18 +0000</pubDate><guid>https://www.spidersoft.com.au/2021/quickest-in-house-html-to-pdf-solution/</guid><description>&lt;p>You can find some online API‚Äôs use free tier to test them, but‚Ä¶ you can make it your own. So without any further intructions, here is a recipe.&lt;/p></description></item><item><title>CURL to GO</title><link>https://www.spidersoft.com.au/2019/curl-to-go/</link><pubDate>Fri, 12 Jul 2019 06:44:56 +0000</pubDate><guid>https://www.spidersoft.com.au/2019/curl-to-go/</guid><description>Quite often we are looking for a quick way to make a request in GO, and we have working query tested in CURL. Sometimes it‚Äôs problematic to ‚Äúmove‚Äù all queries to GO, and build up whole query using client, protocol and so on.
From the author of my beloved Caddy server there is a tool called curl-to-Go which basically does what is says. Just paste your CURL request and GO lang code to implement that.</description></item><item><title>Automated email parser</title><link>https://www.spidersoft.com.au/2019/automated-email-parser/</link><pubDate>Wed, 27 Mar 2019 08:43:27 +0000</pubDate><guid>https://www.spidersoft.com.au/2019/automated-email-parser/</guid><description>It&amp;rsquo;s a simple mechanic to decompose emails into valuable parts, like some markup (to push emails directly into internal systems), create file attachments and extract inline images.
Flow is pretty simple, but we have a couple of components.
We need something to ‚Äúreceive‚Äù emails. The easiest way is to use Amazon SES or mailgun or‚Ä¶ something else. There are a couple of SASS solutions for that. Next step is to be notified when the email arrives, so we don‚Äôt have overhead with checking email every couple of minutes We have to ‚Äúdecompose‚Äù ‚Äì decode email from it‚Äôs raw format to text, and attachments.</description></item><item><title>How to make email work better email2issue</title><link>https://www.spidersoft.com.au/2018/how-to-make-email-work-better-email2issue/</link><pubDate>Fri, 16 Mar 2018 09:02:56 +0000</pubDate><guid>https://www.spidersoft.com.au/2018/how-to-make-email-work-better-email2issue/</guid><description>&lt;p>The problem:&lt;/p>
&lt;p>We are using bug tracking system, as most of the software development companies. Creating an issue is quite simple. Open bug tracking system, fill some inputs, upload attachments ‚Äì done. Issue is created. Sometimes issue is described with multiple attachments (screenshots). Bug tracking system allows us to embed images into description.¬† All issues come from users in a form of email.&lt;/p></description></item><item><title>Binary compression still alive ‚Äì golang binary compression.</title><link>https://www.spidersoft.com.au/2018/binary-compression-still-alive-golang-binary-compression/</link><pubDate>Wed, 07 Mar 2018 14:34:57 +0000</pubDate><guid>https://www.spidersoft.com.au/2018/binary-compression-still-alive-golang-binary-compression/</guid><description>In the ancient times, when I was coding mostly in Pascal ‚Äì size did matter. People were using RAR to shave couple kilobytes from archives, and having 2mb executable was better then having 4mb executable file. In that beautiful time we used¬†UPX ‚Äì I wasn‚Äôt aware that this project is still alive, and works nicely with binaries create bo go lang.
Ultimate Packer for eXecutables Copyright (C) 1996 - 2017 UPX 3.</description></item><item><title>Checking JPEG image dimension from partial headers</title><link>https://www.spidersoft.com.au/2017/checking-jpeg-image-dimension-from-partial-headers/</link><pubDate>Wed, 13 Dec 2017 07:43:11 +0000</pubDate><guid>https://www.spidersoft.com.au/2017/checking-jpeg-image-dimension-from-partial-headers/</guid><description>&lt;p>The goal was to read image dimensions from an image file. Pretty easy task with standard ‚Äú
&lt;a href="https://golang.org/pkg/image/#DecodeConfig">image&lt;/a>
‚Äù library and DecodeConfig. The tricky part was ‚Äì the file wasn&amp;rsquo;t completed ‚Äì I had only the beginning of the file. I tried to decode headers by myself. I didn&amp;rsquo;t find an exact recipe in GO and found many people looking for correct answers in many languages.&lt;/p></description></item><item><title>How to install latest golang on EC2</title><link>https://www.spidersoft.com.au/2015/how-to-install-latest-golang-on-ec2/</link><pubDate>Thu, 15 Oct 2015 11:41:54 +0000</pubDate><guid>https://www.spidersoft.com.au/2015/how-to-install-latest-golang-on-ec2/</guid><description>If you are looking for simple way to upgrade yourt golang installation on EC2, you can experience error like that:
Error: Package: golang-bin-1.5.1-0.el6.x86_64 (epel) Requires: go = 1.5.1-0.el6 Installing: golang-1.4.2-3.19.amzn1.x86_64 (amzn-main) Because on amzn-main repo, there is an older version of golang ‚Äì on epel, there is a newer. Nothing simplier just disable for a momement amzn-main repo, and install golang compeltly from epel.
sudo yum --disablerepo=amzn-main --enablerepo=epel install golang-bin</description></item><item><title>Using Google Cloud storage with AWS libraries in GO LANG</title><link>https://www.spidersoft.com.au/2015/google-cloud-storage-with-aws-libraries-go-lang/</link><pubDate>Fri, 15 May 2015 01:08:15 +0000</pubDate><guid>https://www.spidersoft.com.au/2015/google-cloud-storage-with-aws-libraries-go-lang/</guid><description>&lt;p>
&lt;a href="https://cloud.google.com/storage/docs/overview">Google Cloud storage&lt;/a>
¬†it‚Äôs Google answer to [Amazon S3][1]¬†service. As long one of them is very popular üòâ Second wasn‚Äôt so successful amongst developers due to quite complex processes around service. Amazon is super simple, and developer friendly ‚Äì Google‚Ä¶ well not so easy. So the questions ‚Äì why you may consider using GS instead of well documented, and super easy S3. Not many people realise but Google Cloud Storage is
&lt;a href="http://www.cloudberrylab.com/blog/amazon-s3-azure-and-google-cloud-prices-compare/">actually cheaper&lt;/a>
. The other reason to use Google Storage is having different provider as a backup solution. Anyway ‚Äì let‚Äôs show how easy is to use GS with existing S3 libraries.&lt;/p></description></item><item><title>How update Go library</title><link>https://www.spidersoft.com.au/2015/how-update-go-library/</link><pubDate>Tue, 05 May 2015 04:49:24 +0000</pubDate><guid>https://www.spidersoft.com.au/2015/how-update-go-library/</guid><description>Installation of go library is pretty simple: go get github.com/garyburd/redigo/redis
From time to time, you want to get fresh version of it. If you run that command again it will NOT update the library ‚Äì because it‚Äôs already there. To update it you need to use the¬†-u¬†switch:
go get -u github.com/garyburd/redigo/redis</description></item><item><title>MongoDB vs MySQL using golang</title><link>https://www.spidersoft.com.au/2014/mongodb-vs-mysql-using-golang/</link><pubDate>Mon, 01 Sep 2014 04:48:36 +0000</pubDate><guid>https://www.spidersoft.com.au/2014/mongodb-vs-mysql-using-golang/</guid><description>&lt;p>I‚Äôm the guy who like to test. Benchmark is my‚Ä¶ middle name. You can find dozens articles about speed one or other solution. I mean
&lt;a href="http://www.mongodb.org/">MongoDB&lt;/a>
and
&lt;a href="http://www.mysql.com/">MySQL&lt;/a>
. I tried MongoDB couple times, and each time I¬†wasn‚Äôt ¬†moved by it speed. Got project coming in, when I have to deal with large amount of concurrent connection. It‚Äôs not very big, but bigger then casual MySQL load.&lt;/p>
&lt;p>So‚Ä¶ how did I test ‚Äì very dump way. Got 2 tables, one around 11k records, second one close to 200k record. Not much. Fields were indexed in both MySQL and MongoDB. And then i run benchmarks. First one had string fields, second one numeric.&lt;/p></description></item><item><title>Live code reload in golang</title><link>https://www.spidersoft.com.au/2014/live-code-reload-in-golang/</link><pubDate>Mon, 25 Aug 2014 04:46:44 +0000</pubDate><guid>https://www.spidersoft.com.au/2014/live-code-reload-in-golang/</guid><description>&lt;p>Recompiling
&lt;a href="http://golang.org/">go language&lt;/a>
¬†code during development is bit annoying task. But there is an package for that. Actually I found at least 3:&lt;/p></description></item><item><title>Reading unknown JSON object in go language</title><link>https://www.spidersoft.com.au/2014/reading-unknown-json-object-in-go-language/</link><pubDate>Mon, 18 Aug 2014 07:19:08 +0000</pubDate><guid>https://www.spidersoft.com.au/2014/reading-unknown-json-object-in-go-language/</guid><description>&lt;p>Exploring [The Go Language][1] is so much fun. Everything is brand new, and different then any other language. This time I‚Äôm going to show quick snippet which shows how to read JSON object with unknown structure, and map elements to something like hash table.&lt;/p></description></item><item><title>Fetch page with proxy using The Go language</title><link>https://www.spidersoft.com.au/2014/fetch-page-with-proxy-using-the-go-language/</link><pubDate>Wed, 13 Aug 2014 06:16:24 +0000</pubDate><guid>https://www.spidersoft.com.au/2014/fetch-page-with-proxy-using-the-go-language/</guid><description>&lt;p>For a while i‚Äôm playing with
&lt;a href="http://golang.org/">The Go Programming Language&lt;/a>
‚Äì so far I loved it. I figure out that I‚Äôll push some code snippets from time to time.&lt;br>
Today I¬†spend some time creating simple not ever crawler, but website fetcher.&lt;/p>
&lt;p>Idea is very simple ‚Äì download page, run xpath query on it and spit out results. I was looking for decent xpath library for Go and couldn‚Äôt find any. I tried to use
&lt;a href="http://gopkg.in/xmlpath.v2">xmlpath&lt;/a>
but it sucks. I couldn‚Äôt even run queries like &lt;code>id('product-details')/div[@class='product-price']&amp;quot;&lt;/code> Then I found something nicer ‚Äì
&lt;a href="https://github.com/moovweb/gokogiri">Gokogiri&lt;/a>
‚Äì which works pretty nicely, but ‚Äì couldn‚Äôt find any examples except this
&lt;a href="https://www.moovweb.com/blog/gokogiri-the-best-way-to-parse-xml-in-go/">small article&lt;/a>
.&lt;/p>
&lt;p>The only problem with running Gokogiri is that it uses &lt;code>libxml2&lt;/code> which is not a huge problem on Linux based systems, but on Mac OS X you have to install it via
&lt;a href="http://brew.sh/">homebrew&lt;/a>
&lt;br>
&lt;code>brew install libxml2&lt;/code>&lt;/p></description></item><item><title>Getting started with go language on Mac OS X</title><link>https://www.spidersoft.com.au/2014/getting-started-with-go-language-on-mac-os-x/</link><pubDate>Sun, 13 Jul 2014 06:42:43 +0000</pubDate><guid>https://www.spidersoft.com.au/2014/getting-started-with-go-language-on-mac-os-x/</guid><description>&lt;p>Node.js is like space shuttle ‚Äì very sophisticated, very fast but one simple mistake and‚Ä¶ it goes down.&lt;/p>
&lt;p>So recently i tried
&lt;a href="http://golang.org/">The Go Language&lt;/a>
¬†which is advertised as&lt;/p>
&lt;blockquote>
&lt;p>Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.&lt;/p>
&lt;/blockquote>
&lt;p>Because google is a creator of this langauge documentation sucks. Plenty of random documents of everwhere, no clean how to documentation.&lt;/p></description></item></channel></rss>